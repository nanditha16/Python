Table: Employee
+-------------+------+
| Column Name | Type |
+-------------+------+
| id          | int  |
| salary      | int  |
+-------------+------+
id is the primary key (column with unique values) for this table.
Each row of this table contains information about the salary of an employee.
 
Write a solution to find the nth highest distinct salary from the Employee table. 
If there are less than n distinct salaries, return null.
The result format is in the following example.

Example 1:
Input: 
Employee table:
+----+--------+
| id | salary |
+----+--------+
| 1  | 100    |
| 2  | 200    |
| 3  | 300    |
+----+--------+
n = 2
Output: 
+------------------------+
| getNthHighestSalary(2) |
+------------------------+
| 200                    |
+------------------------+
Example 2:

Input: 
Employee table:
+----+--------+
| id | salary |
+----+--------+
| 1  | 100    |
+----+--------+
n = 2
Output: 
+------------------------+
| getNthHighestSalary(2) |
+------------------------+
| null                   |
+------------------------+


CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  -- Declare a variable to hold the offset value
  DECLARE offset_val INT;

  -- Calculate the offset (since LIMIT is zero-based)
  SET offset_val = N - 1;

  -- Return the nth highest distinct salary
  RETURN (
    SELECT salary
    FROM (
      -- Select distinct salaries in descending order
      SELECT DISTINCT salary
      FROM Employee
      ORDER BY salary DESC
      -- Skip the top (N-1) salaries and return the next one
      LIMIT offset_val, 1
    ) AS temp
  );
END;
