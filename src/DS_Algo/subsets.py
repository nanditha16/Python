# Given an integer array nums of unique elements, 
# return all possible subsets (the power set).

# The solution set must not contain duplicate subsets. 
# Return the solution in any order.

# Constraints:
# 1 <= nums.length <= 10
# -10 <= nums[i] <= 10
# All the numbers of nums are unique.

# Time	O(2ⁿ)	Each element has two choices: include or exclude
# Space	O(n)	Recursion depth and temporary path
# Where n is the length of nums.

# Example :
# Input: nums = [1,2,3]
# Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

# Input: nums = [0]
# Output: [[],[0]]

# Step-by-Step Explanation
# Backtracking:
#     Start from index 0 and build subsets recursively.   
#     At each step, add the current path to the result.
# Recursive Exploration:
#     For each index i, choose nums[i], recurse, then backtrack.
# Subset Generation:
#     All subsets are generated by either including or excluding each element.

from typing import List

class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        res = []

        def backtrack(start: int, path: List[int]):
            res.append(path[:])  # Add current subset
            for i in range(start, len(nums)):
                path.append(nums[i])       # Choose
                backtrack(i + 1, path)     # Explore
                path.pop()                 # Un-choose
        backtrack(0, [])
        return res

